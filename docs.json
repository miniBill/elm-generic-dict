[{"name":"GenericDict","comment":" This module can be use to codegen a dictionary with a custom type as key.\n\n\n# Types\n\n@docs Config\n\n\n# Configuration\n\n@docs init, withTypeName, useElmFastDict\n\n\n# Generation\n\n@docs generateFile, generateDeclarations\n\n","unions":[{"name":"Config","comment":" Configuration used to build a generic dictionary.\n","args":[],"cases":[]}],"aliases":[],"values":[{"name":"generateDeclarations","comment":" Generates declarations from the given configuration.\n\nThis can be useful if you want to add your own custom declarations to the file.\n\n","type":"GenericDict.Config -> List.List Elm.Declaration"},{"name":"generateFile","comment":" Generates a file from the given configuration.\n","type":"GenericDict.Config -> Elm.File"},{"name":"init","comment":" Starts building a custom dictionary, given the type of the key, the namespace of the resulting file, and a `toComparable` function.\n\nThe `toComparable` function will be _copied_ in each declaration, so it should be kept very simple (or extracted to a function, and then passed in like `{ toComparable = Gen.YourType.toString }`, or similar).\n\n","type":"{ keyType : Elm.Annotation.Annotation, namespace : List.List String.String, toComparable : Elm.Expression -> Elm.Expression } -> GenericDict.Config"},{"name":"useElmFastDict","comment":" Use `miniBill/elm-fast-dict` as the backing container.\nThis means that generated code will depend on that package but gives the advantages of that package (read `elm-fast-dict`'s README for pros and cons).\n","type":"GenericDict.Config -> GenericDict.Config"},{"name":"withTypeName","comment":" Use a custom type name for the dictionary type.\n","type":"String.String -> GenericDict.Config -> GenericDict.Config"}],"binops":[]},{"name":"GenericSet","comment":" This module can be use to codegen a set with a custom type as value.\n\n\n# Types\n\n@docs Config\n\n\n# Configuration\n\n@docs init, withTypeName, useElmFastDict\n\n\n# Generation\n\n@docs generateFile, generateDeclarations\n\n","unions":[{"name":"Config","comment":" Configuration used to build a generic set.\n","args":[],"cases":[]}],"aliases":[],"values":[{"name":"generateDeclarations","comment":" Generates declarations from the given configuration.\n\nThis can be useful if you want to add your own custom declarations to the file.\n\n","type":"GenericSet.Config -> List.List Elm.Declaration"},{"name":"generateFile","comment":" Generates a file from the given configuration.\n","type":"GenericSet.Config -> Elm.File"},{"name":"init","comment":" Starts building a custom set, given the type of the value, the namespace of the resulting file, and a `toComparable` function.\n\nThe `toComparable` function will be _copied_ in each declaration, so it should be kept very simple (or extracted to a function, and then passed in like `{ toComparable = Gen.YourType.toString }`, or similar).\n\n","type":"{ valueType : Elm.Annotation.Annotation, namespace : List.List String.String, toComparable : Elm.Expression -> Elm.Expression } -> GenericSet.Config"},{"name":"useElmFastDict","comment":" Use `miniBill/elm-fast-dict` as the backing container.\nThis means that generated code will depend on that package but gives the advantages of that package (read `elm-fast-dict`'s README for pros and cons).\n","type":"GenericSet.Config -> GenericSet.Config"},{"name":"withTypeName","comment":" Use a custom type name for the set type.\n","type":"String.String -> GenericSet.Config -> GenericSet.Config"}],"binops":[]}]